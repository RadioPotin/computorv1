(* Parser for computorv1, generated by menhir *)

%token EOF
%token EQ
%token PLUS
%token STAR
%token MINUS
%token<string> VAR
%token<int> INT
%token<float> FLOAT
%token CIRCUM

%left MINUS
%left PLUS
%start <Ast.equation> equation

%%
  equation:
  | pl = polynome EQ pr = polynome EOF {(pl, pr)}

    polynome:
  | pl = polynome PLUS pr = polynome {Ast.Add (pl, pr)}
| pl = polynome MINUS pr = polynome {Ast.Sub (pl, pr)}
| m = monome {Ast.Mon m}

%inline monome:
    | f = FLOAT option(STAR) v = VAR CIRCUM p = INT {(f, Some(v, p))}
| i = INT option(STAR) v = VAR CIRCUM p = INT {((float_of_int i), Some(v, p))}
| f = FLOAT option(STAR) v = VAR {(f, Some(v, 1))}
| i = INT option(STAR) v = VAR {((float_of_int i), Some(v, 1))}
| MINUS f = FLOAT option(STAR) v = VAR CIRCUM p = INT {(~-.f, Some(v, p))}
| MINUS i = INT option(STAR) v = VAR CIRCUM p = INT {((float_of_int (-i)), Some(v, p))}
| MINUS f = FLOAT option(STAR) v = VAR {(~-.f, Some(v, 1))}
| MINUS i = INT option(STAR) v = VAR {((float_of_int (-i)), Some(v, 1))}
| v = VAR CIRCUM i = INT {(1., Some(v, i))}
| MINUS v = VAR CIRCUM i = INT {(-1., Some(v, i))}
| MINUS v = VAR {(-1., Some(v, 1))}
| MINUS i = INT {((float_of_int (-i)), None)}
| MINUS f = FLOAT {(~-.f, None)}
| v = VAR {(1., Some(v, 1))}
| i = INT {((float_of_int i), None)}
| f = FLOAT {(f, None)}
